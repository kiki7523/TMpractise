#include<string>
#include<iostream>
#include<set>
#include<stack>
#include<unordered_set>
#include<vector>
#include<sstream>
using namespace std;
class Temp
{	public:
	Temp()
	{
		++_nowNumber;
		_total = _total + _nowNumber;
	}
	static int _total;
	static int _nowNumber;

};

int Temp::_nowNumber = 0;
int Temp:: _total = 0;
int toN(int n)
{
	//if (n >=0)传统递归
	//{
	//	return n + toN(n-1);
	//}
	//else
	//{
	//	return 0;
	//}



	//以逻辑运算符&& 为例，对于 A&& B 这个表达式，如果 A 表达式返回 False\textit{ False }False ，
	//那么 A&& B 已经确定为 False\textit{ False }False ，此时不会去执行表达式 B。
	//同理，对于逻辑运算符 || ， 对于 A || B 这个表达式，
	//如果 A 表达式返回 True\textit{ True }True ，那么 A || B 已经确定为 True\textit{ True }True ，此时不会去执行表达式 B。
	//利用这一特性，我们可以将判断是否为递归的出口看作 A && B 表达式中的 A 部分，递归的主体函数看作 B 部分。
	//如果不是递归出口，则返回 True\textit{ True }True，并继续执行表达式 B 的部分，否则递归结束
	//n&& (n +=toN(n - 1));//&&比+=优先级高
	//return n;

	vector<Temp>vec(n);//利用构造函数和static类的所有成员共用同一个静态成员变量，所以静态成员变量常用来做一些公共的杂活，比如说给成员编号。
	
	return Temp::_total;


}
