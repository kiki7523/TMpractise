#include<string>
#include<iostream>
#include<set>
#include<stack>
#include<unordered_set>
#include<vector>
#include<sstream>
#include<map>
using namespace std;

int main()
{
    vector<int>prices = { 9,8,7,6 };
    //map<int, multiset<int>>ma;
    //int size = prices.size();
    //for (int i = 0; i < size; i++)
    //{
    //    multiset<int> balance;
    //    for (int j = i+1; j < size; j++)
    //    {
    //        balance.insert(prices[j] - prices[i]);
    //    }
    //    ma.insert({ i, balance });
    //    /*ma.insert(make_pair(i, balance));
    //    ma.insert(pair<int,vector<int>>(i, balance));  */
    //}
    //int max =*( --ma[0].end());
    //int maxData = 0;
    //for (int i = 0; i < size-1; i++)
    //{
    //  
    //    if (max < *(--ma[i].end()))
    //    {
    //        max = *(--ma[i].end());
    //        maxData = i;
    //    }
    //}
    //cout << "day = " << maxData << "max =" << max << endl;

    int temp = 0;
    if (prices.size() == 0) {
        return temp;
    }
    int a = prices[0];  //卖出价格
    int b = prices[0];  //买入价格
    int day = 0;
    for (int i = 0; i < prices.size(); i++) {
        if (prices[i] < b) { //此时价格更便宜，可以买入,才有可能比之前赚得更多，因为价格是固定的,所以有必要更新 ,
            //动态规划核心是找如何更低的可能比如说这个更低的可能就是买入的价格更低才能有可能更低
            b = prices[i];
            a = b;   //a应该随b一同变动。
        }
        else if (prices[i] > a) {
            a = prices[i];  //有更高价格时，为卖出价格
            if ((a - b) > temp) { //更新最大利润
                temp = a - b;
            }
        }
    }
    cout << temp << endl;

}

	
