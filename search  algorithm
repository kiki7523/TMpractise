int binaryFind(int* arr, int target,int low, int high)//二分查找
{	
	int mid = (low + high) / 2;
	if (low > high)
	{
		return -1;
	}
	else if (arr[mid] == target)
	{
		return mid;
	}
	else if (arr[mid] > target)
	{
			
		return binaryFind(arr, target, low, mid - 1);//这里直接用return 是因为这个函数只能报错或者返回正确的值
	}
	else if (arr[mid] < target)
	{
		return binaryFind(arr, target, mid + 1, high);
	}
}
int binaryFind1(int* arr, int target, int low, int high)
{	
	while (target != arr[(low + high) / 2]&&low<high)//自己实现，没有考虑到数组里不存在target的情况
	{
		if (target > arr[(low + high) / 2])
		{
			low = (low + high) / 2 + 1;
		}
		else
		{
			high = (low + high) / 2 - 1;
		}
	}
	return (low + high) / 2;

	while (low < high)
	{
		int mid = (low + high) / 2;
		if (target == arr[mid])
		{
			return mid;
		}
		 else if(target < arr[mid])
		{
			high = mid - 1;
		}
		 else if (target > arr[mid])
		{
			low = mid + 1;
		}
	}
	return -1;//只有返回mid和报错的情况


}
