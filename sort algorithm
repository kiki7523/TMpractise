int* bubbleSort(int* arr,int n)//冒泡
{
	 for (int i = lenth; i > 1; i--)//冒泡排序原理是每两个相邻元素相互比较，每轮比较，确定一个数的位置
    {
        for (int j = 0; j < i-1; j++)//因为每比较一轮确定一个正确位置到最后一轮只有一个元素不用比 所以i>1
        {
            if (arr[j] > arr[j+1]//因为是数组下标从0开始，j < i-1 不然就越界
            {
                swap(arr[j], arr[j +1]);
            }
        }
    }
	return arr;
}

int partition(int arr[], int low, int count)
{
	int key = arr[count];//决定基准
	int i = low - 1;

	for (int j = low; j < count; j++)
	{
		// 比key小的，全部换到前面去
		if (arr[j] <= key)
			swap(arr[j], arr[++i]);//arry[i]指向的位置是最新＜key,arry[++i]就大于key,发现更小arr[j],就把大于key的arr[++i]互换
	}
	// 此时，i指向的元素一定小于等于pivot
	swap(arr[count], arr[i + 1]);//i+1就是key正确的位置
	return i + 1;
}


void quickSort(int arr[], int low, int count)//快排 count是数组个数 low是数组第一个元素
{
	if (low < count)//在不断递归的过程中传入的low在增加，count在减少 所以作为边界条件
	{
		int mid = partition(arr, low, count);//确定左右两边的边界
		quickSort(arr, low, mid - 1);
		quickSort(arr, mid + 1, count);
	}
}
